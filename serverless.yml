service: birthday-greeting

plugins:
  - serverless-esbuild
  - serverless-offline

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-1
  timeout: 30 # Global timeout for all functions
  vpc: ${self:custom.vpc} # Global VPC config for all functions
  
  environment:
    DB_HOST: !GetAtt RDSInstance.Endpoint.Address
    DB_PORT: ${self:custom.rds.port}
    DB_NAME: ${self:custom.rds.database}
    DB_USER: ${self:custom.rds.username}
    DB_PASSWORD: ${ssm:/birthday-greeting/${self:provider.stage}/db/password}
    WEBHOOK_ENDPOINT: ${env:WEBHOOK_ENDPOINT, 'https://eog8uvm3yyo7caf.m.pipedream.net'}
    IS_OFFLINE: ${env:IS_OFFLINE, 'false'}
    WEBHOOK_QUEUE_URL: !Ref WebhookQueue
    WEBHOOK_DLQ_URL: !Ref WebhookDLQ

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
          Resource: 
            - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/birthday-greeting/${self:provider.stage}/*
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AssignPrivateIpAddresses
            - ec2:UnassignPrivateIpAddresses
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:DeleteMessage
            - sqs:GetQueueUrl
            - sqs:ReceiveMessage
            - sqs:GetQueueAttributes
          Resource: 
            - !GetAtt WebhookQueue.Arn
            - !GetAtt WebhookDLQ.Arn

functions:
  userApi:
    handler: src/handlers/users.handler
    timeout: 30 # Function-specific timeout
    events:
      - http:
          path: /users
          method: post
          cors: true
      - http:
          path: /users/{userId}
          method: put
          cors: true
      - http:
          path: /users/{userId}
          method: delete
          cors: true

  birthdayChecker:
    handler: src/handlers/birthday.handler
    timeout: 30 # Function-specific timeout
    events:
      - schedule: cron(0,15,30,45 * * * ? *)  # Run at minute 0, 15, 30, and 45 of every hour
      # Keep HTTP endpoint for manual triggers
      - http:
          path: /birthday/check
          method: post
          cors: true

  webhookSender:
    handler: src/handlers/webhook.handler
    timeout: 30
    events:
      - sqs:
          arn: !GetAtt WebhookQueue.Arn
          batchSize: 1  # Process one message at a time to handle failures individually
      # Retry failed webhooks every hour
      - schedule: cron(0 * * * ? *)
          
  initDb:
    handler: scripts/init-db.handler
    timeout: 30
    events:
      - http:
          path: /init-db
          method: post
          cors: true

custom:
  esbuild:
    bundle: true
    minify: false
    sourcemap: true
    platform: 'node'
    target: 'node20'
    external:
      - aws-sdk
  
  # Configure serverless-offline
  serverless-offline:
    httpPort: 3000
    lambdaPort: 3002
    useChildProcesses: true

  # RDS Configuration
  rds:
    host: ${ssm:/birthday-greeting/${self:provider.stage}/db/host, 'localhost'}
    port: ${ssm:/birthday-greeting/${self:provider.stage}/db/port, '5432'}
    database: ${ssm:/birthday-greeting/${self:provider.stage}/db/name, 'birthday-greeting-dev'}
    username: ${ssm:/birthday-greeting/${self:provider.stage}/db/username, 'postgres'}
    password: ${ssm:/birthday-greeting/${self:provider.stage}/db/password, 'postgres'}

  # VPC Configuration
  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref PrivateSubnet1
      - !Ref PrivateSubnet2

resources:
  Outputs:
    RDSEndpoint:
      Description: "RDS instance endpoint"
      Value: !GetAtt RDSInstance.Endpoint.Address

  Resources:
    # VPC Resources
    MainVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-vpc

    # Internet Gateway
    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-igw

    AttachGateway:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref MainVPC
        InternetGatewayId: !Ref InternetGateway

    # Public Subnet
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-public-subnet-1

    # Private Subnets
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.3.0/24
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-private-subnet-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MainVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.4.0/24
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-private-subnet-2

    # NAT Gateway
    NatGatewayEIP:
      Type: AWS::EC2::EIP
      DependsOn: AttachGateway
      Properties:
        Domain: vpc

    NatGateway:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId: !GetAtt NatGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-nat

    # Route Tables
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-public-rt

    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MainVPC
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-private-rt

    PrivateRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable

    # Security Groups
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Lambda functions
        VpcId: !Ref MainVPC
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0  # Allow outbound internet access via NAT

    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for RDS instance
        VpcId: !Ref MainVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            SourceSecurityGroupId: !Ref LambdaSecurityGroup  # Only allow access from Lambda
        SecurityGroupEgress:
          - IpProtocol: -1
            FromPort: -1
            ToPort: -1
            CidrIp: 0.0.0.0/0

    # RDS Subnet Group
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for RDS instance
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

    # RDS Instance
    RDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: ${self:service}-${self:provider.stage}
        Engine: postgres
        DBInstanceClass: db.t3.micro
        AllocatedStorage: 20
        StorageType: gp2
        MasterUsername: ${self:custom.rds.username}
        MasterUserPassword: ${ssm:/birthday-greeting/${self:provider.stage}/db/password}
        VPCSecurityGroups:
          - !Ref DBSecurityGroup
        DBSubnetGroupName: !Ref DBSubnetGroup
        PubliclyAccessible: false  # Private access only
        BackupRetentionPeriod: 7
        MultiAZ: false
        Port: 5432
        DBName: postgres  # Set initial database name
        EnableIAMDatabaseAuthentication: false
        Tags:
          - Key: Name
            Value: ${self:service}-${self:provider.stage}-rds

    # SQS Queue for Webhook Processing
    WebhookQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-webhook-queue
        VisibilityTimeout: 30  # Time a message is invisible after being picked up
        MessageRetentionPeriod: 1209600  # 14 days
        RedrivePolicy:
          deadLetterTargetArn: !GetAtt WebhookDLQ.Arn
          maxReceiveCount: 3  # Number of retries before message is moved to DLQ

    # Dead Letter Queue for Failed Webhooks
    WebhookDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-webhook-dlq
        MessageRetentionPeriod: 1209600  # 14 days